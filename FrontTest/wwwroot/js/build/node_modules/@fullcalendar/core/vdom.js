import { __extends } from '../../tslib/tslib.es6.js';
import { Component as d, createElement as v, render as M, createRef as y, Fragment as p, options as n, createContext as q } from '../../preact/dist/preact.module.js';

window.FullCalendarVDom = {
    Component: d,
    createElement: v,
    render: M,
    createRef: y,
    Fragment: p,
    createContext: createContext,
    flushToDom: flushToDom
};



function flushToDom() {
    var oldDebounceRendering = n.debounceRendering; 
    var callbackQ = [];
    function execCallbackSync(callback) {
        callbackQ.push(callback);
    }
    n.debounceRendering = execCallbackSync;
    M(v(FakeComponent, {}), document.createElement('div'));
    while (callbackQ.length) {
        callbackQ.shift()();
    }
    n.debounceRendering = oldDebounceRendering;
}
var FakeComponent = /** @class */ (function (_super) {
    __extends(FakeComponent, _super);
    function FakeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FakeComponent.prototype.render = function () { return v('div', {}); };
    FakeComponent.prototype.componentDidMount = function () { this.setState({}); };
    return FakeComponent;
}(d));
function createContext(defaultValue) {
    var ContextType = q(defaultValue);
    var origProvider = ContextType.Provider;
    ContextType.Provider = function () {
        var _this = this;
        var isNew = !this.getChildContext;
        var children = origProvider.apply(this, arguments);
        if (isNew) {
            var subs_1 = [];
            this.shouldComponentUpdate = function (_props) {
                if (_this.props.value !== _props.value) {
                    subs_1.some(function (c) {
                        c.context = _props.value;
                        c.forceUpdate();
                    });
                }
            };
            this.sub = function (c) {
                subs_1.push(c);
                var old = c.componentWillUnmount;
                c.componentWillUnmount = function () {
                    subs_1.splice(subs_1.indexOf(c), 1);
                    old && old.call(c);
                };
            };
        }
        return children;
    };
    return ContextType;
}
